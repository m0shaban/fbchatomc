#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
ูุงุฌูุฉ ูุญุงุฏุซุฉ ูุญููุฉ ูุงุฎุชุจุงุฑ ุดุงุช ุจูุช ูุฌูุน ุนูุงู ูุตุฑ
ุชุณุชุฎุฏู ูุฐู ุงููุงุฌูุฉ ูุงุฎุชุจุงุฑ ูุชูููู ุฃุฏุงุก ุงูุดุงุช ุจูุช ูุจู ูุดุฑู ุนูู ููุณุจูู
"""

import os
import json
import random
import datetime
import subprocess
import logging
import re
from typing import Dict, Any, Optional, Tuple, List

from bot import ChatBot
from config import BOT_SETTINGS, APP_SETTINGS, init

# ุชููุฆุฉ ุงูุฅุนุฏุงุฏุงุช
init()

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logging.basicConfig(
    level=getattr(logging, APP_SETTINGS["LOG_LEVEL"]),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename=APP_SETTINGS.get("LOG_FILE")
)
logger = logging.getLogger(__name__)

def save_conversation(conversation: Dict[str, Any]) -> None:
    """
    ุญูุธ ุงููุญุงุฏุซุฉ ูู ููู JSON
    
    :param conversation: ูุงููุณ ูุญุชูู ุนูู ุจูุงูุงุช ุงููุญุงุฏุซุฉ
    """
    # ุฅูุดุงุก ุงุณู ุงูููู ุจุงุณุชุฎุฏุงู ุงูููุช ุงูุญุงูู
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    filename = f"local_chat_{timestamp}.json"
    
    # ุงูุชุฃูุฏ ูู ูุฌูุฏ ูุฌูุฏ ุงููุญุงุฏุซุงุช
    if not os.path.exists(BOT_SETTINGS["CONVERSATIONS_DIR"]):
        os.makedirs(BOT_SETTINGS["CONVERSATIONS_DIR"], exist_ok=True)
    
    # ุญูุธ ุงููุญุงุฏุซุฉ ูู ููู JSON
    filepath = os.path.join(BOT_SETTINGS["CONVERSATIONS_DIR"], filename)
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(conversation, f, ensure_ascii=False, indent=4)
        print(f"ุชู ุญูุธ ุงููุญุงุฏุซุฉ ูู ุงูููู: {filepath}")
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุญูุธ ุงููุญุงุฏุซุฉ: {e}")
        print(f"ุฎุทุฃ ูู ุญูุธ ุงููุญุงุฏุซุฉ: {e}")

def set_console_arabic() -> bool:
    """
    ุชุนููู ุชุฑููุฒ ูุญุฏุฉ ุงูุชุญูู ูุฏุนู ุงููุบุฉ ุงูุนุฑุจูุฉ
    
    :return: True ุฅุฐุง ุชู ุชุนููู ุงูุชุฑููุฒ ุจูุฌุงุญ
    """
    try:
        # ูุญุงููุฉ ุชุนููู ุชุฑููุฒ ูุญุฏุฉ ุงูุชุญูู ุฅูู UTF-8
        if os.name == 'nt':  # ูุธุงู Windows
            # ุงุณุชุฎุฏุงู subprocess ุจุฏูุงู ูู os.system ูุชุญุณูู ุงูุชูุงูู
            subprocess.run(['chcp', '65001'], check=True, shell=True)
        return True
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุชุนููู ุชุฑููุฒ ูุญุฏุฉ ุงูุชุญูู: {e}")
        print(f"ุชุญุฐูุฑ: ูุฏ ูููู ููุงู ูุดููุฉ ูู ุนุฑุถ ุงููุต ุงูุนุฑุจู ุจุณุจุจ ุฎุทุฃ ูู ุชุนููู ุงูุชุฑููุฒ: {e}")
        return False

def print_welcome() -> None:
    """
    ุทุจุงุนุฉ ุฑุณุงูุฉ ุชุฑุญูุจูุฉ
    """
    print("\n" + "=" * 50)
    print("ูุฑุญุจุงู ุจู ูู ูุงุฌูุฉ ุงุฎุชุจุงุฑ ุดุงุช ุจูุช ูุฌูุน ุนูุงู ูุตุฑ!")
    print("ูุฐู ุงููุงุฌูุฉ ุชุณูุญ ูู ุจุงุฎุชุจุงุฑ ุงูุดุงุช ุจูุช ูุจู ูุดุฑู ุนูู ููุณุจูู")
    print("ุงูุชุจ 'ุฎุฑูุฌ' ููุฎุฑูุฌ ูู ุงููุงุฌูุฉุ ุฃู 'ุญูุธ' ูุญูุธ ุงููุญุงุฏุซุฉ")
    print("=" * 50 + "\n")

def test_connection() -> bool:
    """
    ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจู DeepSeek API
    
    :return: True ุฅุฐุง ูุฌุญ ุงูุงุชุตุงู
    """
    try:
        print("ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจู DeepSeek API...")
        
        # ุฅูุดุงุก ูุณุฎุฉ ูู ุงูุดุงุช ุจูุช
        bot = ChatBot()
        
        # ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุนู ุทุฑูู ุฅุฑุณุงู ุฑุณุงูุฉ ุงุฎุชุจุงุฑ
        test_message = "ุงุฎุชุจุงุฑ ุงูุงุชุตุงู"
        
        # ุชุญุถูุฑ ุงููุณุชุฎุฏู ุงููููู ููุงุฎุชุจุงุฑ
        user_id = "test_connection"
        bot.conversation_state[user_id] = {"awaiting_name": False}
        
        # ุชูุฌูู ุฑุณุงูุฉ ุงุฎุชุจุงุฑ
        api_response = bot.api.generate_response(
            test_message, 
            context="ูุฐุง ุงุฎุชุจุงุฑ ุงุชุตุงู ููุทุ ูุฑุฌู ุงูุฑุฏ ุจู 'ุงุฎุชุจุงุฑ ูุงุฌุญ' ููุท."
        )
        
        # ุงูุชุญูู ูู ุงูุงุณุชุฌุงุจุฉ
        if api_response and "choices" in api_response:
            print("โ ุชู ุงูุงุชุตุงู ุจู DeepSeek API ุจูุฌุงุญ!")
            logger.info("ูุฌุญ ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจู DeepSeek API")
            return True
        else:
            print("โ ูุดู ุงูุงุชุตุงู ุจู DeepSeek API!")
            logger.error(f"ูุดู ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจู DeepSeek API: {api_response}")
            return False
            
    except Exception as e:
        print(f"โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงุฎุชุจุงุฑ ุงูุงุชุตุงู: {e}")
        logger.error(f"ุฎุทุฃ ูู ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจู DeepSeek API: {e}")
        return False

def load_data_file(data_file: str = "data.json") -> Dict:
    """
    ุชุญููู ุจูุงูุงุช ูู ููู JSON
    
    :param data_file: ูุณุงุฑ ููู ุงูุจูุงูุงุช
    :return: ุงูุจูุงูุงุช ุงููุญููุฉ ููุงููุณ
    """
    try:
        with open(data_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    except Exception as e:
        print(f"ุฎุทุฃ ูู ุชุญููู ููู ุงูุจูุงูุงุช: {e}")
        return {}

def match_keywords(message: str, keywords: List[str]) -> bool:
    """
    ุงูุชุญูู ููุง ุฅุฐุง ูุงูุช ุฃู ูู ุงููููุงุช ุงูููุชุงุญูุฉ ููุฌูุฏุฉ ูู ุงูุฑุณุงูุฉ
    
    :param message: ุงูุฑุณุงูุฉ ุงููุฑุงุฏ ูุญุตูุง
    :param keywords: ูุงุฆูุฉ ุงููููุงุช ุงูููุชุงุญูุฉ
    :return: True ุฅุฐุง ุชู ุงูุนุซูุฑ ุนูู ุชุทุงุจู
    """
    message = message.lower()
    for keyword in keywords:
        if keyword.lower() in message:
            return True
    return False

def search_faq(user_message: str, data: Dict) -> Tuple[Optional[str], float]:
    """
    ุงูุจุญุซ ุนู ุฅุฌุงุจุฉ ูู ูุงุฆูุฉ ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ
    
    :param user_message: ุฑุณุงูุฉ ุงููุณุชุฎุฏู
    :param data: ุจูุงูุงุช ุงููุฌูุน
    :return: ุฒูุฌ ูู ุงูุฅุฌุงุจุฉ ูุฏุฑุฌุฉ ุงูุซูุฉ
    """
    prompts = data.get("prompts", [])
    best_match = None
    best_confidence = 0.0
    
    user_message = user_message.lower()
    
    for prompt in prompts:
        question = prompt.get("question", "").lower()
        answer = prompt.get("answer", "")
        
        # ุงูุจุญุซ ุนู ูููุงุช ูุชุทุงุจูุฉ
        question_words = set(re.findall(r'\b\w+\b', question))
        message_words = set(re.findall(r'\b\w+\b', user_message))
        
        if not question_words:
            continue
        
        # ุญุณุงุจ ุฏุฑุฌุฉ ุงูุชุทุงุจู
        common_words = question_words.intersection(message_words)
        
        if len(common_words) > 0:
            confidence = len(common_words) / len(question_words)
            
            # ุฒูุงุฏุฉ ุงูุซูุฉ ุฅุฐุง ูุงูุช ููุงู ุชุทุงุจูุงุช ุฏูููุฉ
            if question in user_message:
                confidence += 0.3
            
            # ุชุญุฏูุซ ุฃูุถู ุชุทุงุจู
            if confidence > best_confidence:
                best_confidence = confidence
                best_match = answer
    
    return best_match, best_confidence

def get_contact_info(data: Dict) -> str:
    """
    ุงุณุชุฎุฑุงุฌ ูุนูููุงุช ุงูุงุชุตุงู ุจุงููุฌูุน
    
    :param data: ุจูุงูุงุช ุงููุฌูุน
    :return: ูุต ูุนูููุงุช ุงูุงุชุตุงู
    """
    contact_info = data.get("contact_info", {})
    
    contact_text = "ููุชูุงุตู ูุนูุง:\n"
    
    phone = contact_info.get("phone")
    if phone:
        contact_text += f"๐ ูุงุชู: {phone}\n"
    
    whatsapp = contact_info.get("whatsapp", {}).get("main_office")
    if whatsapp:
        contact_text += f"๐ฑ ูุงุชุณุงุจ: {whatsapp}\n"
    
    email = contact_info.get("email")
    if email:
        contact_text += f"๐ง ุจุฑูุฏ ุฅููุชุฑููู: {email}\n"
    
    website = contact_info.get("website")
    if website:
        contact_text += f"๐ ุงููููุน ุงูุฅููุชุฑููู: {website}\n"
    
    facebook = contact_info.get("social_media", {}).get("facebook")
    if facebook:
        contact_text += f"๐ ููุณุจูู: {facebook}\n"
    
    return contact_text

def get_company_info(data: Dict) -> str:
    """
    ุงุณุชุฎุฑุงุฌ ูุนูููุงุช ุนุงูุฉ ุนู ูุฌูุน ุนูุงู ูุตุฑ
    
    :param data: ุจูุงูุงุช ุงููุฌูุน
    :return: ูุต ุงููุนูููุงุช
    """
    prompts = data.get("prompts", [])
    about_company = ""
    leadership = ""
    projects = ""
    
    # ุงูุจุญุซ ุนู ุงููุนูููุงุช ุฐุงุช ุงูุตูุฉ
    for prompt in prompts:
        if prompt.get("id") == 1:  # ูุง ูู ูุฌูุน ุนูุงู ูุตุฑุ
            about_company = prompt.get("answer", "")
        elif prompt.get("id") == 2:  # ูู ูุฏูุฑ ุงููุฌูุนุ
            leadership = prompt.get("answer", "")
        elif prompt.get("id") == 3:  # ูุง ูู ุฃุจุฑุฒ ูุดุฑูุนุงุช ุงููุฌูุนุ
            projects = prompt.get("answer", "")
    
    # ุชุฌููุน ุงููุนูููุงุช ูู ุฑุฏ ุดุงูู
    response = "ูุนูููุงุช ุนู ูุฌูุน ุนูุงู ูุตุฑ:\n\n"
    
    if about_company:
        response += f"โ ูุจุฐุฉ ุนู ุงููุฌูุน:\n{about_company}\n\n"
    
    if leadership:
        response += f"โ ููุงุฏุฉ ุงููุฌูุน:\n{leadership}\n\n"
    
    if projects:
        response += f"โ ุฃุจุฑุฒ ุงููุดุฑูุนุงุช:\n{projects}\n\n"
    
    # ุฅุถุงูุฉ ูุนูููุงุช ุงูุงุชุตุงู
    response += get_contact_info(data)
    
    return response

def handle_local_response(user_message: str, data_file: str = None) -> Tuple[Optional[str], float]:
    """
    ูุนุงูุฌุฉ ุฑุณุงูุฉ ุงููุณุชุฎุฏู ูุญููุงู ุจุฏูู ุงุณุชุฎุฏุงู API
    
    :param user_message: ุฑุณุงูุฉ ุงููุณุชุฎุฏู
    :param data_file: ูุณุงุฑ ููู ุงูุจูุงูุงุช (ุงุฎุชูุงุฑู)
    :return: ุฒูุฌ ูู ุงูุฑุฏ ูุฏุฑุฌุฉ ุงูุซูุฉ
    """
    data_file = data_file or BOT_SETTINGS.get("DATA_FILE", "data.json")
    data = load_data_file(data_file)
    if not data:
        return None, 0.0
    
    user_message = user_message.lower()
    
    # ุทูุจ ูุนูููุงุช ุนู ุงูุดุฑูุฉ
    company_info_keywords = [
        "ูุนูููุงุช ุนู ุงูุดุฑูุฉ", "ูุนูููุงุช ุนู ุงููุฌูุน", "ูู ูู ูุฌูุน ุนูุงู ูุตุฑ",
        "ูุง ูู ูุฌูุน ุนูุงู ูุตุฑ", "ุนุฑููู ุจุงููุฌูุน", "ูุจุฐุฉ ุนู ุงููุฌูุน", "ูุจุฐุฉ ุนู ุงูุดุฑูุฉ"
    ]
    
    if match_keywords(user_message, company_info_keywords):
        return get_company_info(data), 0.9
    
    # ุทูุจ ูุนูููุงุช ุงูุงุชุตุงู
    contact_keywords = [
        "ูุนูููุงุช ุงูุงุชุตุงู", "ุงุชุตู ุจูุง", "ุฑูู ุงููุงุชู", "ุงูุจุฑูุฏ ุงูุฅููุชุฑููู",
        "ุงูุนููุงู", "ุงููููุน", "ุงููุงุชุณุงุจ", "ุงูุชูุงุตู", "ููู ุงูููุฑ", "ุนููุงู ุงูุดุฑูุฉ"
    ]
    
    if match_keywords(user_message, contact_keywords):
        return get_contact_info(data), 0.9
    
    # ุงูุจุญุซ ูู ุงูุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ
    faq_answer, confidence = search_faq(user_message, data)
    if faq_answer and confidence >= 0.6:
        # ุฅุถุงูุฉ ุชุนุจูุฑ ุจุดุฑู ูู ุงูุจุฏุงูุฉ
        human_expressions = data.get("human_expressions", {})
        greetings = human_expressions.get("greetings", ["ุฃููุงู!"])
        explanations = human_expressions.get("explanations", ["ุฅููู ุงููุนูููุงุช ุงููุทููุจุฉ:"])
        
        response = f"{random.choice(greetings)}\n\n{random.choice(explanations)}\n\n{faq_answer}"
        
        return response, confidence
    
    # ุงูุชุญูู ูู ูุฌูุฏ ุฑุฏูุฏ ุนุงูุฉ ููุฃุณุฆูุฉ ุงูุดุงุฆุนุฉ ุฌุฏูุง
    if "ููู ุญุงูู" in user_message or "ุงุฒูู" in user_message:
        return "ุฃูุง ุจุฎูุฑุ ุดูุฑุงู ููุณุคุงู! ููู ูููููู ูุณุงุนุฏุชู ุงููููุ", 0.8
    
    if "ุดูุฑุง" in user_message or "ุดูุฑุงู" in user_message:
        return "ุงูุนูู! ุณุนุฏุช ุจุฎุฏูุชู. ูู ููุงู ุดูุก ุขุฎุฑ ูููููู ูุณุงุนุฏุชู ุจูุ", 0.8
    
    # ูู ูุชู ุงูุนุซูุฑ ุนูู ุฑุฏ ูุญูู ููุงุณุจ
    return None, 0.0

def main() -> None:
    """
    ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ ููุงุฌูุฉ ุงููุญุงุฏุซุฉ ุงููุญููุฉ
    """
    # ูุญุงููุฉ ุชุนููู ุชุฑููุฒ ูุญุฏุฉ ุงูุชุญูู ูุฏุนู ุงููุบุฉ ุงูุนุฑุจูุฉ
    set_console_arabic()
    
    # ุทุจุงุนุฉ ุฑุณุงูุฉ ุชุฑุญูุจูุฉ
    print_welcome()
    
    # ุงุฎุชุจุงุฑ ุงูุงุชุตุงู ุจู DeepSeek API
    connection_success = test_connection()
    if not connection_success:
        print("\nุชุญุฐูุฑ: ูุดู ุงูุงุชุตุงู ุจู DeepSeek API. ุณูุณุชุฎุฏู ุงูุดุงุช ุจูุช ุขููุฉ ุงูุงุญุชูุงุท.")
    
    # ุชููุฆุฉ ุงูุดุงุช ุจูุช
    print("\nุฌุงุฑู ุชููุฆุฉ ุงูุดุงุช ุจูุช...")
    bot = ChatBot()
    print("ุชู ุชููุฆุฉ ุงูุดุงุช ุจูุช ุจูุฌุงุญ.")
    
    # ุชุนููู ูุนุฑู ุงููุณุชุฎุฏู ุงููุญูู
    user_id = f"local_user_{random.randint(1000, 9999)}"
    
    # ุจุฏุก ุงููุญุงุฏุซุฉ ูุน ุงูุดุงุช ุจูุช
    print("\nูุญุงุฏุซุฉ ุฌุฏูุฏุฉ ุจุฏุฃุช. ุงูุชุจ ุฑุณุงูุชู ุฃุฏูุงู:")
    
    # ุญููุฉ ุงููุญุงุฏุซุฉ
    while True:
        try:
            # ุงูุญุตูู ุนูู ุฑุณุงูุฉ ุงููุณุชุฎุฏู
            user_message = input("\nุฃูุช: ")
            
            # ุงูุชุญูู ูู ุฃูุงูุฑ ุงูุฎุฑูุฌ
            if user_message.strip().lower() in ["exit", "quit", "ุฎุฑูุฌ"]:
                print("\nุฅููุงุก ุงููุญุงุฏุซุฉ...")
                break
            
            # ุงูุชุญูู ูู ุฃูุฑ ุงูุญูุธ
            if user_message.strip().lower() in ["save", "ุญูุธ"]:
                # ุญูุธ ุงููุญุงุฏุซุฉ ุงูุญุงููุฉ
                if user_id in bot.conversation_history:
                    save_conversation(bot.conversation_history[user_id])
                else:
                    print("ูุง ุชูุฌุฏ ูุญุงุฏุซุฉ ูุญูุธูุง.")
                continue
            
            # ุงูุชุญูู ูู ุฃูุฑ ุงูุฅุญุตุงุฆูุงุช
            if user_message.strip().lower() in ["stats", "ุฅุญุตุงุฆูุงุช"]:
                # ุทุจุงุนุฉ ุฅุญุตุงุฆูุงุช ุงููุญุงุฏุซุฉ
                if user_id in bot.conversation_history and "messages" in bot.conversation_history[user_id]:
                    messages_count = len(bot.conversation_history[user_id]["messages"])
                    print(f"\nุฅุญุตุงุฆูุงุช ุงููุญุงุฏุซุฉ:")
                    print(f"ุนุฏุฏ ุงูุฑุณุงุฆู: {messages_count}")
                    print(f"ูุนุฑู ุงููุณุชุฎุฏู: {user_id}")
                    if "user_name" in bot.conversation_history[user_id]:
                        print(f"ุงุณู ุงููุณุชุฎุฏู: {bot.conversation_history[user_id]['user_name']}")
                else:
                    print("ูุง ุชูุฌุฏ ุฅุญุตุงุฆูุงุช ูุชุงุญุฉ.")
                continue
            
            # ุงูุชุญูู ูู ุงูุฑุฏูุฏ ุงููุญููุฉ
            local_response, confidence = handle_local_response(user_message)
            if local_response:
                print(f"\nูุญูุฏ ุณูุงูุฉ: {local_response}")
                continue
            
            # ุงูุญุตูู ุนูู ุฑุฏ ุงูุดุงุช ุจูุช
            try:
                response = bot.generate_response(user_message, user_id)
                print(f"\nูุญูุฏ ุณูุงูุฉ: {response}")
            except Exception as e:
                logger.error(f"ุฎุทุฃ ุฃุซูุงุก ุชูููุฏ ุงูุฑุฏ: {e}")
                print(f"\nุญุฏุซ ุฎุทุฃ: {e}")
                print("ุงุณุชุฎุฏุงู ุฑุฏ ุงุญุชูุงุทู...")
                print("\nูุญูุฏ ุณูุงูุฉ: ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุฑุณุงูุชู. ููููู ุงูุชูุงุตู ูุนูุง ูุจุงุดุฑุฉ ุนูู ุฑูู ุงููุงุชู: 01100901200 ูุณูููู ุณุนุฏุงุก ุจูุณุงุนุฏุชู.")
            
        except KeyboardInterrupt:
            print("\n\nุชู ุฅููุงุก ุงููุญุงุฏุซุฉ ุจูุงุณุทุฉ ุงููุณุชุฎุฏู.")
            break
        
        except Exception as e:
            logger.error(f"ุฎุทุฃ ุบูุฑ ูุชููุน: {e}")
            print(f"\nุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน: {e}")
    
    # ุญูุธ ุงููุญุงุฏุซุฉ ุนูุฏ ุงูุฎุฑูุฌ
    if BOT_SETTINGS.get("SAVE_CONVERSATIONS", True) and user_id in bot.conversation_history:
        save_conversation(bot.conversation_history[user_id])
    
    print("\nุชู ุฅููุงุก ุงููุญุงุฏุซุฉ. ูุดูุฑู ุนูู ุงุฎุชุจุงุฑ ุงูุดุงุช ุจูุช!")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logger.critical(f"ุฎุทุฃ ูู ุชุดุบูู ุงููุงุฌูุฉ ุงููุญููุฉ: {e}")
        print(f"ุฎุทุฃ ูู ุชุดุบูู ุงููุงุฌูุฉ ุงููุญููุฉ: {e}")

"""
ุฎุงุฏู ูุญูู ูุงุฎุชุจุงุฑ ุงูุดุงุช ุจูุช ูุจู ุฑูุนู ุฅูู ููุณุจูู ูุงุณูุฌุฑ
ูุณุชุฎุฏู Flask ูุฅูุดุงุก ูุงุฌูุฉ API ุจุณูุทุฉ ุชุชูุญ ูููุงุฌูุฉ ุงูุงุฎุชุจุงุฑ ุงูุชูุงุตู ูุน ุงูุดุงุช ุจูุช
"""

import os
import json
import logging
import datetime
from flask import Flask, request, jsonify, send_from_directory
from flask_cors import CORS
from bot import ChatBot
from api import DeepSeekAPI
from config import BOT_SETTINGS, APP_SETTINGS, setup_log_directory, setup_conversations_directory
from api_alternatives import handle_local_response

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
setup_log_directory()
logging.basicConfig(
    level=getattr(logging, APP_SETTINGS["LOG_LEVEL"]),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filename=BOT_SETTINGS.get("LOG_FILE")
)
logger = logging.getLogger(__name__)

# ุฅูุดุงุก ุชุทุจูู Flask
app = Flask(__name__)
CORS(app)  # ููุณูุงุญ ุจุงูุทูุจุงุช ูู ููุณ ุงูุฎุงุฏู

# ุชููุฆุฉ ุงูุดุงุช ุจูุช
chatbot = ChatBot()

# ุฅูุดุงุก ูุฌูุฏ ูููุญุงุฏุซุงุช ุฅุฐุง ูู ููู ููุฌูุฏุงู
setup_conversations_directory()

@app.route('/')
def index():
    """ุตูุญุฉ ุงูุงุฎุชุจุงุฑ ุงูุฑุฆูุณูุฉ"""
    return send_from_directory('.', 'test_interface.html')

@app.route('/api/chat', methods=['POST'])
def chat_api():
    """ูุงุฌูุฉ API ูููุญุงุฏุซุฉ"""
    try:
        data = request.json
        user_message = data.get('message', '')
        user_id = data.get('user_id', 'local_user')
        session_id = data.get('session_id', 'local_session')
        
        if not user_message:
            return jsonify({'error': 'ุงูุฑุณุงูุฉ ูุทููุจุฉ'}), 400
        
        # ูุญุงููุฉ ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ ูุญููุงู ุฃููุงู
        local_response, found_locally = handle_local_response(user_message)
        
        if found_locally:
            logger.info(f"ุชู ุงูุนุซูุฑ ุนูู ุฑุฏ ูุญูู ููุฑุณุงูุฉ: {user_message[:30]}...")
            bot_response = local_response
        else:
            # ุงุณุชุฎุฏุงู ุงูุดุงุช ุจูุช ููุญุตูู ุนูู ุฑุฏ
            bot_response = chatbot.get_response(
                user_message=user_message,
                user_id=user_id,
                conversation_source="local_test"
            )
        
        # ุญูุธ ุงููุญุงุฏุซุฉ
        save_conversation(user_message, bot_response, user_id, session_id)
        
        return jsonify({
            'response': bot_response,
            'timestamp': datetime.datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ: {str(e)}")
        return jsonify({
            'error': 'ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุงูุฑุณุงูุฉ',
            'details': str(e)
        }), 500

def save_conversation(user_message, bot_response, user_id, session_id):
    """ุญูุธ ุงููุญุงุฏุซุฉ ูู ููู JSON"""
    try:
        if not BOT_SETTINGS.get("SAVE_CONVERSATIONS", True):
            return
        
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        filename = f"local_chat_{timestamp}.json"
        filepath = os.path.join(BOT_SETTINGS.get("CONVERSATIONS_DIR", "conversations"), filename)
        
        conversation_data = {
            "timestamp": datetime.datetime.now().isoformat(),
            "user_id": user_id,
            "session_id": session_id,
            "conversation": [
                {
                    "role": "user",
                    "content": user_message,
                    "timestamp": datetime.datetime.now().isoformat()
                },
                {
                    "role": "bot",
                    "content": bot_response,
                    "timestamp": datetime.datetime.now().isoformat()
                }
            ]
        }
        
        # ุงูุชุญูู ูู ูุฌูุฏ ููู ูุญุงุฏุซุฉ ุณุงุจู ููุฌูุณุฉ
        session_files = []
        if os.path.exists(BOT_SETTINGS.get("CONVERSATIONS_DIR", "conversations")):
            for file in os.listdir(BOT_SETTINGS.get("CONVERSATIONS_DIR", "conversations")):
                if file.startswith("local_chat_") and file.endswith(".json") and session_id in file:
                    session_files.append(file)
        
        if session_files:
            # ุชุญุฏูุซ ุขุฎุฑ ููู ูุญุงุฏุซุฉ ููุฌูุณุฉ
            latest_session_file = sorted(session_files)[-1]
            filepath = os.path.join(BOT_SETTINGS.get("CONVERSATIONS_DIR", "conversations"), latest_session_file)
            
            try:
                with open(filepath, 'r', encoding='utf-8') as f:
                    existing_data = json.load(f)
                
                # ุฅุถุงูุฉ ุงูุฑุณุงุฆู ุงูุฌุฏูุฏุฉ ุฅูู ุงููุญุงุฏุซุฉ ุงูููุฌูุฏุฉ
                existing_data["conversation"].extend(conversation_data["conversation"])
                conversation_data = existing_data
            except Exception as e:
                logger.error(f"ุฎุทุฃ ูู ูุฑุงุกุฉ ููู ุงููุญุงุฏุซุฉ ุงูุณุงุจู: {e}")
                # ุงุณุชุฎุฏุงู ุงูุจูุงูุงุช ุงูุฌุฏูุฏุฉ ููุท ูู ุญุงู ุญุฏูุซ ุฎุทุฃ
        
        # ุญูุธ ุงููุญุงุฏุซุฉ
        with open(filepath, 'w', encoding='utf-8') as f:
            json.dump(conversation_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"ุชู ุญูุธ ุงููุญุงุฏุซุฉ ูู ุงูููู: {filepath}")
        
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุญูุธ ุงููุญุงุฏุซุฉ: {str(e)}")

@app.route('/api/responses', methods=['GET'])
def get_predefined_responses():
    """ุงูุญุตูู ุนูู ุงูุฑุฏูุฏ ุงููุญููุธุฉ ูุณุจููุง ูู ููู ุงูุจูุงูุงุช"""
    try:
        # ูุฑุงุกุฉ ุจูุงูุงุช ุงูุฃุณุฆูุฉ ูุงูุฃุฌูุจุฉ ูู ููู ุงูุจูุงูุงุช
        with open(BOT_SETTINGS.get("DATA_FILE", "data.json"), 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        # ุชุญููู ุจูุงูุงุช ุงูุฃุณุฆูุฉ ูุงูุฃุฌูุจุฉ ุฅูู ุชูุณูู ููุงุณุจ ูููุงุฌูุฉ
        responses = {}
        for prompt in data.get("prompts", []):
            if "question" in prompt and "answer" in prompt:
                responses[prompt["question"]] = prompt["answer"]
        
        return jsonify(responses)
    
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุงูุญุตูู ุนูู ุงูุฑุฏูุฏ ุงููุญููุธุฉ ูุณุจููุง: {str(e)}")
        return jsonify({
            'error': 'ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุญุตูู ุนูู ุงูุฑุฏูุฏ ุงููุญููุธุฉ ูุณุจููุง',
            'details': str(e)
        }), 500

@app.route('/api/validate', methods=['GET'])
def validate_api():
    """ุงูุชุญูู ูู ุตุญุฉ ุงูุงุชุตุงู ุจู API"""
    try:
        api = DeepSeekAPI()
        status = api.validate_connection()
        return jsonify(status)
    except Exception as e:
        logger.error(f"ุฎุทุฃ ูู ุงูุชุญูู ูู ุตูุงุญูุฉ API: {str(e)}")
        return jsonify({
            'status': 'ุบูุฑ ูุชุตู',
            'error': str(e)
        })

if __name__ == "__main__":
    # ุชุดุบูู ุชุทุจูู Flask ุจูุถุน ุงูุชุตุญูุญ
    debug_mode = APP_SETTINGS.get("DEBUG_MODE", False)
    host = "127.0.0.1"  # ุงุณุชุฎุฏุงู localhost ููุงุฎุชุจุงุฑ ุงููุญูู
    port = 5001  # ุงุณุชุฎุฏุงู ูููุฐ ูุฎุชูู ุนู ุงููููุฐ ุงูุฑุฆูุณู ููุชุทุจูู
    
    print(f"ุชุดุบูู ูุงุฌูุฉ ุงุฎุชุจุงุฑ ุงูุดุงุช ุจูุช ุนูู ุงูุนููุงู: http://{host}:{port}")
    print(f"ุงุถุบุท CTRL+C ูุฅููุงู ุงูุฎุงุฏู")
    
    # ุจุฏุก ุชุดุบูู ุงูุฎุงุฏู
    app.run(host=host, port=port, debug=debug_mode)